<!--?<!DOCTYPE html metal:define-macro="layout">-->
<!--?<html lang="{{request.locale_name}}">-->
<!--?  <head>-->


<!--?  </head>-->

<!--?  <body>body </body>-->
<!--?</html>-->



<!DOCTYPE html>
<html lang="en">
<head>
  <title>Trace Diagram</title>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/js/bootstrap.min.js"></script>
  <style>
    /* Remove the navbar's default margin-bottom and rounded borders */
    .navbar {
      margin-bottom: 0;
      border-radius: 0;
    }

    /* Set height of the grid so .sidenav can be 100% (adjust as needed) */
    .row.content {height: 450px}

    /* Set gray background color and 100% height */
    .sidenav {
      padding-top: 20px;
      background-color: #f1f1f1;
      height: 100%;
    }

    /* Set black background color, white text and some padding */
    footer {
      background-color: #555;
      color: white;
      padding: 15px;
    }

    line {
          cursor: pointer;
        }
    /* On small screens, set height to 'auto' for sidenav and grid */
    @media screen and (max-width: 767px) {
      .sidenav {
        height: 100%;
        padding: 15px;
      }
      .row.content {height:100%;}
    }
  </style>
</head>
<body>

<nav class="navbar navbar-inverse">
  <div class="container-fluid">
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#myNavbar">
<!--?        <span class="icon-bar"></span>-->
<!--?        <span class="icon-bar"></span>-->
<!--?        <span class="icon-bar"></span>-->
      </button>
      <a class="navbar-brand" href="#">Logo</a>
    </div>
    <div class="collapse navbar-collapse" id="myNavbar">
      <ul class="nav navbar-nav">
        <li class="active"><a href="home">Home</a></li>
        <li><a href="main">Main</a></li>
        <li><a href="trace">Trace</a></li>
        <li><a href="document">Document</a></li>
      </ul>
      <ul class="nav navbar-nav navbar-right">
        <li><a href="#"><span class="glyphicon glyphicon-log-in"></span> Login</a></li>
      </ul>
    </div>
  </div>
</nav>

<div class="container-fluid text-center">
  <div class="row content">
    <div class="col-sm-2 sidenav">
<!--?      <p><a href="#">Link</a></p>-->
<!--?      <p><a href="#">Link</a></p>-->
<!--?      <p><a href="#">Link</a></p>-->
    </div>
    <div class="col-sm-8 text-left">
      <h1>Trace diagram</h1>

<!-- <br>
<input id="button1" type="button" value="Change Dimensions"
            onclick="changeDimensions()"/>
           -->
<script>
    myList =''
    function changeDimensions() {
        document.getElementById("rect1").setAttribute("width", "100");
    }
</script>



<p id="demo"></p>
<div style="width:30%">

    var traces = [ <br>
        ['','doc1','doc7'],<br>
        ['','doc2','doc11'],<br>
        ['','doc3','doc11'],<br>
        ['','doc4','doc11'],<br>
        ['','doc5','doc11'],<br>
        ['','doc6','doc7'],<br>
        ['','doc11','doc7'],<br>
        ['','doc7','doc8'],<br>
        ['','doc7','doc9'],<br>
        ['','doc7','doc10'],<br>
        ['','doc7','doc12a'],<br>
        ['','doc3','doc6'],<br>
        ['','doc9','doc14'],<br>
        ['','doc7','doc12b'],<br>
        ['','doc1a','doc1'],<br>
        ['','doc1b','doc1a'],<br>
        ['','docA','doc1a'],<br>
        ['','docB','doc1b']<br>
      ];<br>
<br>

</div>

<svg id="secondsvg" height="400" width="1400" style="background-color: lightgrey" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
        <!-- <line x1= "10" y1= "10"
          x2="490" y2="490,"
          style="stroke:rgb(255,90,50); stroke-width:5" -->
    />
</svg>

    <div id="info" height="400" width="1400">
        info...
        <br>
    </div>


<svg id="cont" height="10" width="700" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
   rrrr     <!-- <line x1= "10" y1= "10"
          x2="490" y2="490,"
          style="stroke:rgb(255,90,50); stroke-width:5" -->
    />
</svg>

     <svg id="mysvg" width="700" height="100" style="background-color: lightgrey">
    <!-- <rect id="rect1" x="10" y="10" width="50" height="80"
          style="stroke:#000000; fill:none;"/> -->
          <g id="myg" class="links"></g>
          <!-- <line x1= "10" y1= "10"
          x2="490" y2="490"
          style="stroke:rgb(255,90,50); stroke-width:5" -->
    />
     </svg>

        <hr>
    </div>
    <div class="col-sm-2 sidenav">
<!--?      <div class="well">-->
<!--?        <p>ADS</p>-->
<!--?      </div>-->
<!--?      <div class="well">-->
<!--?        <p>ADS</p>-->
<!--?      </div>-->
    </div>


  </div>



</div>

<footer class="container-fluid text-center">
  <p>Footer Text</p>
</footer>

</body>


<script>

  // https://renenyffenegger.ch/notes/design/graphic/svg/examples/line

//document.getElementById('cont').setAttribute("height", "1000px");
svgHeight = document.getElementById('secondsvg').getAttribute("height");
svgWidth = document.getElementById('secondsvg').getAttribute("width");
document.getElementById('mysvg').style.visibility = 'hidden';
document.getElementById('cont').style.visibility = 'hidden';

//alert( svgWidth);
      var pCenterX = svgWidth/2;
      var pCenterY = svgHeight/2;
      //var w = 300;
      var cars = ["Saab", "Volvo", "BMW"];
      var traces = [
        ['','doc1','doc7'],
        ['','doc2','doc11'],
        ['','doc3','doc11'],
        ['','doc4','doc11'],
        ['','doc5','doc11'],
        ['','doc6','doc7'],
        ['','doc11','doc7'],
        ['','doc7','doc8'],
        ['','doc7','doc9'],
        ['','doc7','doc10'],
        ['','doc7','doc12a'],
        ['','doc3','doc6'],
        ['','doc9','doc14'],
        ['','doc7','doc12b'],
        ['','doc1a','doc1'],
        ['','doc1b','doc1a'],
        ['','docA','doc1a'],
        ['','docB','doc1b']
      ];

      // "pa" is panel array
      var paL1 = new Array ();
      var paL2 = new Array ();
      var paR1 = new Array ();
      var paR2 = new Array ();
      var myPts = new Array ();
      var panelNumber = 1;
      var superArray = new Array ();
      function buildLeftPanels(theArray,centerDoc,locPanelNumber, locPanelSide)
      {
          var tempArray = new Array ();
          if (locPanelNumber == 1) {
              // set variables for x,y
              var x = svgWidth * .35;
              var y = 0;
          } else if (locPanelNumber == 2) {
              x = svgWidth * .20;
              y = 0;
          } else if (locPanelNumber == 3) {
              x = svgWidth * .05;
              y = 0;
          } else {
            x = 1;
            y = 0;
          }


          var u = 0;
          for(var i = 0 ; i < theArray.length; i ++)
          {
            if (theArray[i]) {
              t =  theArray[i];
              if (locPanelSide == "L") {
                r = t[3];
              } else {
                r = t[4];
              }

              // alert(r);

              for(var n = 0 ; n < traces.length; n ++)
              {
                if (traces[n])
                {
                  if (traces[n][2] == r) {
                    // alert(traces[n][0]);
                    var nArray = new Array ();
                    y = y + 50;
                    // nArray[0] = [x,y,traces[n][0],traces[n][1]];
                    nArray[0] = [locPanelNumber,x,y,traces[n][1],traces[n][2],t[1],t[2],locPanelSide];
                    // paL2[n] = nArray;
                        superArray[superArray.length + 1] = nArray;
                        tempArray[u] = [locPanelNumber,x,y,traces[n][1],traces[n][2],t[1],t[2]];
                        u = u + 1;
                    a = 0;
                  }
                }
              }
            }
          }
          if ((tempArray) && (tempArray.length > 0))
          {
            buildLeftPanels(tempArray,'doc11',locPanelNumber + 1,locPanelSide)
          }
      }

       function buildRightPanels(theArray,centerDoc,locPanelNumber, locPanelSide)
      {
          var tempArray1 = new Array ();
          if (locPanelNumber == 1) {
              // set variables for x,y
              var x = svgWidth * .60;
              var y = 0;
          } else if (locPanelNumber == 2) {
              x = svgWidth * .75;
              y = 0;
          } else if (locPanelNumber == 3) {
              x = svgWidth * .85;
              y = 0;
          } else {
              x = 0;
              y = 1;
          }

          var u = 0;
          for(var i = 0 ; i < theArray.length; i ++)
          {
            if (theArray[i]) {
              t =  theArray[i];

               if (locPanelSide == "L") {
                r = t[3];
              } else {
                r = t[4];
              }

              for(var n = 0 ; n < traces.length; n ++)
              {
                if (traces[n])
                {
                  if (traces[n][1] == r) {
                    // alert(traces[n][0]);
                    var nArray = new Array ();
                    y = y + 50;
                    // nArray[0] = [x,y,traces[n][0],traces[n][1]];
                    nArray[0] = [locPanelNumber,x,y,traces[n][1],traces[n][2],t[1],t[2],locPanelSide];
                    // paL2[n] = nArray;
                        superArray[superArray.length + 1] = nArray;
                        tempArray1[u] = [locPanelNumber,x,y,traces[n][1],traces[n][2],t[1],t[2]];
                        u = u + 1;
                    a = 0;
                  }
                }
              }
            }
          }
          if ((tempArray1) && (tempArray1.length > 0))
          {
            buildRightPanels(tempArray1,'doc11',locPanelNumber + 1,locPanelSide)
          }
      }

      var firstArrayL = new Array ();
      var firstArrayR = new Array ();
      var centerText = 'doc7';
      firstArrayL[0] = ['',pCenterX,pCenterY,centerText];
      firstArrayR[0] = ['',pCenterX,pCenterY,'',centerText];
       buildLeftPanels(firstArrayL,centerText,panelNumber,'L');
       buildRightPanels(firstArrayR,centerText,panelNumber,'R');

      // set variables for x,y
      var x = svgWidth * .25;
      var y = 0;
      // alert(traces.length)
      // for(var i = 0 ; i < 15; i ++)
      for(var i = 0;i < traces.length; i ++)
      {
        if (traces[i]) {

              if (traces[i][2] == 'doc7') {
              // alert("P: " + traces[i][0] + "," + traces[i][1]);
                var nArray = new Array ();
                y = y + 50;
                // nArray[0] = [x,y,traces[i][1],traces[i][2]];
                nArray[0] = [x,y,traces[i][1],traces[i][2],pCenterX,pCenterY];
                paL1[i] = nArray;
              }
        }
      }

      x = svgWidth * .10;
      y = 0;
      for(var i = 0 ; i < paL1.length; i ++)
      {
        if (paL1[i]) {
          t =  paL1[i][0];
          r = t[2];
          // alert(r);
          for(var n = 0 ; n < traces.length; n ++)
          {
            if (traces[n])
            {
              if (traces[n][2] == r) {
                // alert(traces[n][0]);
                var nArray = new Array ();
                y = y + 50;
                // nArray[0] = [x,y,traces[n][0],traces[n][1]];
                nArray[0] = [x,y,traces[n][1],traces[n][2],t[0],t[1]];
                paL2[n] = nArray;

                a = 0;
              }
            }
          }
        }

        //if (paL1[i][1] == 7) {
          //alert("P: " + traces[i][0] + "," + traces[i][1]);
          // var nArray = new Array ();
          // y = y + 50;
          // nArray[0] = [x,y];
          // paL1[i] = nArray;
        //}
      }

      // populate panel R 1  (paR1)
      y = 0;
      x = svgWidth * .60;
      for(var i = 0 ; i < traces.length; i ++)
      {
       // alert("C: " + traces[i][1]);
       if  (traces[i])
       {
            if (traces[i][1] == 'doc7') {
              var nArray = new Array ();
              y = y + 50;
              // nArray[0] = [x,y];
              nArray[0] = [x,y,traces[i][1],traces[i][2],pCenterX,pCenterY];
              paR1[i] = nArray;
            }
          }
      }


    x = svgWidth * .80;
      y = 0;
      for(var i = 0 ; i < paR1.length; i ++)
      {
        if (paR1[i]) {
          t =  paR1[i][0];
          r = t[3];
          // alert(r);
          for(var n = 0 ; n < traces.length; n ++)
          {
            if (traces[n])
            {
              if (traces[n][1] == r) {
                // alert(traces[n][0]);
                var nArray = new Array ();
                y = y + 50;
                // nArray[0] = [x,y,traces[n][0],traces[n][1]];
                nArray[0] = [x,y,traces[n][1],traces[n][2],t[0],t[1]];
                paR2[n] = nArray;

                a = 0;
              }
            }
          }

        }
      }



      // draw circles
      // document.getElementById("demo").innerHTML = cars;
      var x1 = new Array ();
      var svgns = "http://www.w3.org/2000/svg",
      container = document.getElementById( 'cont' );
      for(var i = 0 ; i < paL1.length; i ++)
      {
        var circle = document.createElementNS(svgns, 'circle');
        x1 = paL1[i];
        if (x1) {
          x = x1[0][0];
          y = x1[0][1];
          valP = x1[0][2];
          var tmpPt = new Array ();
          tmpPt[0] = x;
          tmpPt[1] = y;
          circle.setAttributeNS(null, 'cx', x);
          circle.setAttributeNS(null, 'cy', y);
          circle.setAttributeNS(null, 'r', 2);
          circle.setAttributeNS(null, 'style', 'fill: none; stroke: blue; stroke-width: 1px;' );
          container.appendChild(circle);


          var text1 = document.createElementNS(svgns, 'text');
          text1.setAttributeNS(null,'x',x);
          text1.setAttributeNS(null,'y',y);
          text1.setAttributeNS(null,'font-size','20px');
          text1.setAttributeNS(null,'fill','blue');
          var textNode = document.createTextNode(valP);
          text1.appendChild(textNode);
          document.getElementById("myg").appendChild(text1);
          container.appendChild(text1);

        }
      }



      // draw the PL2 circles
      for(var i = 0 ; i < paL2.length; i ++)
      {
        var circle3 = document.createElementNS(svgns, 'circle');
        x1 = paL2[i];
        if (x1) {
          x = x1[0][0];
          y = x1[0][1];
          valP = x1[0][2];

          circle3.setAttributeNS(null, 'cx', x);
          circle3.setAttributeNS(null, 'cy', y);
          circle3.setAttributeNS(null, 'r', 2);
          circle3.setAttributeNS(null, 'style', 'fill: none; stroke: blue; stroke-width: 1px;' );
          container.appendChild(circle3);

          var text1 = document.createElementNS(svgns, 'text');
          text1.setAttributeNS(null,'x',x);
          text1.setAttributeNS(null,'y',y);
          text1.setAttributeNS(null,'font-size','20px');
          text1.setAttributeNS(null,'fill','red');
          var textNode = document.createTextNode(valP);
          text1.appendChild(textNode);
          document.getElementById("myg").appendChild(text1);
          container.appendChild(text1);
        }
      }

      for(var i = 0 ; i < paR1.length; i ++)
      {
        var circle3 = document.createElementNS(svgns, 'circle');
        x1 = paR1[i];
        if (x1) {
          x = x1[0][0];
          y = x1[0][1];
          valP = x1[0][3];

          circle3.setAttributeNS(null, 'cx', x);
          circle3.setAttributeNS(null, 'cy', y);
          circle3.setAttributeNS(null, 'r', 2);
          circle3.setAttributeNS(null, 'style', 'fill: none; stroke: blue; stroke-width: 1px;' );
          container.appendChild(circle3);

          var text1 = document.createElementNS(svgns, 'text');
          text1.setAttributeNS(null,'x',x);
          text1.setAttributeNS(null,'y',y);
          text1.setAttributeNS(null,'font-size','20px');
          text1.setAttributeNS(null,'fill','green');
          var textNode = document.createTextNode(valP);
          text1.appendChild(textNode);
          document.getElementById("myg").appendChild(text1);
          container.appendChild(text1);
        }
      }


      // draw circles for panel Right 2
      for(var i = 0 ; i < paR2.length; i ++)
      {
        var circle3 = document.createElementNS(svgns, 'circle');
        x1 = paR2[i];
        if (x1) {
          x = x1[0][0];
          y = x1[0][1];
          valP = x1[0][3];

          circle3.setAttributeNS(null, 'cx', x);
          circle3.setAttributeNS(null, 'cy', y);
          circle3.setAttributeNS(null, 'r', 2);
          circle3.setAttributeNS(null, 'style', 'fill: none; stroke: blue; stroke-width: 1px;' );
          container.appendChild(circle3);

          var text1 = document.createElementNS(svgns, 'text');
          text1.setAttributeNS(null,'x',x);
          text1.setAttributeNS(null,'y',y);
          text1.setAttributeNS(null,'font-size','20px');
          text1.setAttributeNS(null,'fill','red');
          var textNode = document.createTextNode(valP);
          text1.appendChild(textNode);
          document.getElementById("myg").appendChild(text1);
          container.appendChild(text1);
        }
      }

      var circleCenter = document.createElementNS(svgns,'circle');

          circleCenter.setAttributeNS(null, 'cx', pCenterX);
          circleCenter.setAttributeNS(null, 'cy', pCenterY);
          circleCenter.setAttributeNS(null, 'r', 20);
          circleCenter.setAttributeNS(null, 'style', 'fill: none; stroke: red; stroke-width: 1px;' );
          container.appendChild(circleCenter);


          var text1 = document.createElementNS(svgns, 'text');
          text1.setAttributeNS(null,'x',pCenterX);
          text1.setAttributeNS(null,'y',pCenterY);
          text1.setAttributeNS(null,'font-size','26px');
          text1.setAttributeNS(null,'fill','black');
          var textNode = document.createTextNode('doc7');
          text1.appendChild(textNode);
          document.getElementById("myg").appendChild(text1);
          container.appendChild(text1);

          // var newLine = document.createElementNS(svgns,'line');
          // newLine.setAttribute('id','line2');
          // newLine.setAttribute('x1','0');
          // newLine.setAttribute('y1','0');
          // newLine.setAttribute('x2','300');
          // newLine.setAttribute('y2','200');
          // newLine.setAttribute("stroke", "black")
          // container.appendChild(newLine);

          // var line = document.createElementNS(svgns, 'line');
          // line.setAttribute( 'x1',  '10');
          // line.setAttribute( 'y1',  '10');
          // line.setAttribute( 'x2', '290');
          // line.setAttribute( 'y2', '490');
          // line.setAttribute("stroke", "red")
          //   container.appendChild(line);


        // document.getElementById("cont").appendChild(line);

for(var n = 0 ; n < paL1.length; n ++)
  {
      if (paL1[n])
      {
      tempPt = paL1[n];
      k = tempPt[0][0];
       var line = document.createElementNS(svgns, 'line');
       line.setAttribute( 'x1',  k.toString());
       line.setAttribute( 'y1',   tempPt[0][1]);
       line.setAttribute( 'x2',  tempPt[0][4]);
       line.setAttribute( 'y2',  tempPt[0][5]);
       line.setAttribute("stroke", "red")

       container.appendChild(line);


      }
 }


for(var n = 0 ; n < paL2.length; n ++)
  {
      if (paL2[n])
      {
      tempPt = paL2[n];
      k = tempPt[0][0];
       var line = document.createElementNS(svgns, 'line');
       line.setAttribute( 'x1',  k.toString());
       line.setAttribute( 'y1',   tempPt[0][1]);
       line.setAttribute( 'x2',  tempPt[0][4]);
       line.setAttribute( 'y2',  tempPt[0][5]);
       line.setAttribute("stroke", "red")

       container.appendChild(line);
      }
 }


for(var n = 0 ; n < paR1.length; n ++)
  {
      if (paR1[n])
      {
      tempPt = paR1[n];
      k = tempPt[0][0];
       var line = document.createElementNS(svgns, 'line');
       line.setAttribute( 'x1',  k.toString());
       line.setAttribute( 'y1',   tempPt[0][1]);
       line.setAttribute( 'x2',  tempPt[0][4]);
       line.setAttribute( 'y2',  tempPt[0][5]);
       line.setAttribute("stroke", "red")

       container.appendChild(line);


      }
 }


for(var n = 0 ; n < paR2.length; n ++)
  {
      if (paR2[n])
      {
      tempPt = paR2[n];
      k = tempPt[0][0];
       var line = document.createElementNS(svgns, 'line');
       line.setAttribute( 'x1',  k.toString());
       line.setAttribute( 'y1',   tempPt[0][1]);
       line.setAttribute( 'x2',  tempPt[0][4]);
       line.setAttribute( 'y2',  tempPt[0][5]);
       line.setAttribute("stroke", "red")

       container.appendChild(line);
      }
 }


// var draw = SVG('mysvg').size(300, 130)

// var line = draw.line(0, 100, 100, 0).move(20, 20)
// line.stroke({ color: '#f06', width: 10, linecap: 'round' })

//}
// for(var i = 0 ; i < 1000; i ++) {
//  var r = getNode('rect', { x: i, y: 40, width: 100, height: 40, rx: 8, ry: 8, fill: 'pink', stroke:'purple', strokeWidth:7 });
// svg.appendChild(r);
// }


      // draw circles
      // document.getElementById("demo").innerHTML = cars;
      var x1 = new Array ();
      var svgns = "http://www.w3.org/2000/svg",
      container = document.getElementById( 'secondsvg' );
      for(var i = 1 ; i < superArray.length; i ++)
      {
        var circle = document.createElementNS(svgns, 'circle');
        if (superArray[i])
        {
          x1 = superArray[i][0];

          if (x1) {
            x = x1[1];
            y = x1[2];
            side = x1[7];
            if (side == 'L') {
              valP = x1[3];
            } else {
              valP = x1[4];
            }
            var tmpPt = new Array ();
            tmpPt[0] = x;
            tmpPt[1] = y;
            if (x === undefined) {
              h = 'v';
            }
            circle.setAttributeNS(null, 'cx', x);
            circle.setAttributeNS(null, 'cy', y);
            circle.setAttributeNS(null, 'r', 20);
            circle.setAttributeNS(null, 'style', 'fill: none; stroke: blue; stroke-width: 1px;' );
            container.appendChild(circle);


            var text1 = document.createElementNS(svgns, 'text');
            var n = 0;
            if (valP) {
                n = valP.length;
                n = (n/2) * 10;
            }
            text1.setAttributeNS(null,'x',x - n);
            text1.setAttributeNS(null,'y',y + 20);
            text1.setAttributeNS(null,'font-size','20px');
            text1.setAttributeNS(null,'fill','white');
            var textNode = document.createTextNode(valP);
            text1.appendChild(textNode);
            document.getElementById("myg").appendChild(text1);
            container.appendChild(text1);

          }
        }
      }

      var circleCenter = document.createElementNS(svgns,'circle');

          circleCenter.setAttributeNS(null, 'cx', pCenterX);
          circleCenter.setAttributeNS(null, 'cy', pCenterY);
          circleCenter.setAttributeNS(null, 'r', 20);
          circleCenter.setAttributeNS(null, 'style', 'fill: none; stroke: red; stroke-width: 1px;' );
          container.appendChild(circleCenter);


          var text1 = document.createElementNS(svgns, 'text');
          text1.setAttributeNS(null,'x',pCenterX);
          text1.setAttributeNS(null,'y',pCenterY);
          text1.setAttributeNS(null,'font-size','26px');
          text1.setAttributeNS(null,'fill','black');
          var textNode = document.createTextNode(centerText);
          text1.appendChild(textNode);
          document.getElementById("myg").appendChild(text1);
          container.appendChild(text1);
      // draw lines
      for(var n = 0 ; n < superArray.length; n ++)
        {
            if (superArray[n])
            {
            tempPt = superArray[n];
            k = tempPt[0][1];
            var line = document.createElementNS(svgns, 'line');
            line.setAttribute( 'x1',  k.toString());
            line.setAttribute( 'y1',   tempPt[0][2]);
            line.setAttribute( 'docnames',   tempPt[0][4]);
            line.setAttribute( 'x2',  tempPt[0][5]);
            line.setAttribute( 'y2',  tempPt[0][6]);
            line.setAttribute("stroke", "red");

            // line.onclick = test(tempPt[0][2]);
            line.onclick = test;

            container.appendChild(line);


            }
      }

  function test(e) {
         // alert('here');
          p = document.getElementById("info");
          names = e.currentTarget;
          a = names.attributes;
          dc = a['docnames']
           p.innerText =dc.nodeValue;
  }

function getNode(n, v) {
  n = document.createElementNS("http://www.w3.org/2000/svg", n);
  for (var p in v)
    n.setAttributeNS(null, p.replace(/[A-Z]/g, function(m, p, o, s) { return "-" + m.toLowerCase(); }), v[p]);
  return n
}

</script>
</html>